-- Generated by Oracle SQL Developer Data Modeler 21.4.2.059.0838
--   at:        2022-05-29 16:39:42 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE abonament (
    id_abonament  NUMBER(4) NOT NULL,
    tip_abonament VARCHAR2(10) NOT NULL,
    data_incepere DATE NOT NULL,
    data_expirare DATE NOT NULL,
    id_abonat     NUMBER(3) NOT NULL
);

ALTER TABLE abonament
    ADD CONSTRAINT abonament_tip_abonament_ck CHECK ( tip_abonament IN ( 'elev', 'standard', 'student' ) );

ALTER TABLE abonament ADD CONSTRAINT abonament_data_incepere_ck CHECK ( data_incepere < data_expirare );

ALTER TABLE abonament ADD CONSTRAINT abonament_data_expirare_ck CHECK ( data_expirare > data_incepere );

CREATE UNIQUE INDEX abonament__idx ON
    abonament (
        id_abonat
    ASC );

ALTER TABLE abonament ADD CONSTRAINT abonament_pk PRIMARY KEY ( id_abonament );

CREATE TABLE abonat (
    id_abonat      NUMBER(3) NOT NULL,
    nume_abonat    VARCHAR2(40) NOT NULL,
    telefon_abonat VARCHAR2(10) NOT NULL,
    email_abonat   VARCHAR2(40) NOT NULL,
    id_biblioteca  NUMBER(2) NOT NULL
);

ALTER TABLE abonat
    ADD CONSTRAINT abonat_nume_abonat_ck CHECK ( length(nume_abonat) > 1
                                                 AND REGEXP_LIKE ( nume_abonat,
                                                                   '[A-z]' ) );

ALTER TABLE abonat
    ADD CONSTRAINT abonat_email_abonat_ck CHECK ( REGEXP_LIKE ( email_abonat,
                                                                '[a-z0-9._%-]+@[a-z0-9.%-]+\.[a-z]{2,4}' ) );

ALTER TABLE abonat ADD CONSTRAINT abonamente_pk PRIMARY KEY ( id_abonat );

ALTER TABLE abonat ADD CONSTRAINT telefon_abonat UNIQUE ( telefon_abonat );

ALTER TABLE abonat ADD CONSTRAINT email_abonat UNIQUE ( email_abonat );

CREATE TABLE autori (
    id_autor   NUMBER(3) NOT NULL,
    nume_autor VARCHAR2(40) NOT NULL
);

ALTER TABLE autori
    ADD CONSTRAINT autori_nume_autor_ck CHECK ( length(nume_autor) > 1
                                                AND REGEXP_LIKE ( nume_autor,
                                                                  '[A-z]' ) );

ALTER TABLE autori ADD CONSTRAINT autori_pk PRIMARY KEY ( id_autor );

CREATE TABLE biblioteca (
    id_biblioteca   NUMBER(2) NOT NULL,
    nume_biblioteca VARCHAR2(70) NOT NULL,
    oras            VARCHAR2(10) NOT NULL
);

ALTER TABLE biblioteca
    ADD CONSTRAINT biblioteca_nume_biblioteca_ck CHECK ( length(nume_biblioteca) > 1
                                                         AND REGEXP_LIKE ( nume_biblioteca,
                                                                           '[A-z0-9]' ) );

ALTER TABLE biblioteca
    ADD CONSTRAINT biblioteca_oras_ck CHECK ( length(oras) > 1
                                              AND REGEXP_LIKE ( oras,
                                                                '[A-z]' ) );

ALTER TABLE biblioteca ADD CONSTRAINT biblioteca_pk PRIMARY KEY ( id_biblioteca );

CREATE TABLE carti (
    id_carte      NUMBER(2) NOT NULL,
    id_biblioteca NUMBER(2) NOT NULL,
    gen_carte     VARCHAR2(10) NOT NULL,
    nume_carte    VARCHAR2(50) NOT NULL,
    an_aparitie   NUMBER(4)
);

ALTER TABLE carti
    ADD CONSTRAINT carti_gen_carte_ck CHECK ( length(gen_carte) > 1
                                              AND REGEXP_LIKE ( gen_carte,
                                                                '[A-z]' ) );

ALTER TABLE carti
    ADD CONSTRAINT carti_nume_carte CHECK ( length(nume_carte) > 1
                                            AND REGEXP_LIKE ( nume_carte,
                                                              '[A-z]' ) );

ALTER TABLE carti
    ADD CONSTRAINT carti_an_aparitie_ck CHECK ( REGEXP_LIKE ( an_aparitie,
                                                              '[0-9]' ) );

ALTER TABLE carti ADD CONSTRAINT carti_pk PRIMARY KEY ( id_carte );

CREATE TABLE carti_autori (
    autori_id_autor NUMBER(3) NOT NULL,
    carti_id_carte  NUMBER(2) NOT NULL
);

ALTER TABLE carti_autori ADD CONSTRAINT carti_autori_pk PRIMARY KEY ( autori_id_autor,
                                                                      carti_id_carte );

CREATE TABLE detalii_biblioteca (
    email_biblioteca   VARCHAR2(40) NOT NULL,
    telefon_biblioteca VARCHAR2(10) NOT NULL,
    program            VARCHAR2(20) NOT NULL,
    id_biblioteca      NUMBER(2) NOT NULL
);

ALTER TABLE detalii_biblioteca
    ADD CONSTRAINT detalii_biblioteca_email_ck CHECK ( REGEXP_LIKE ( email_biblioteca,
                                                                     '[a-z0-9._%-]+@[a-z0-9.%-]+\.[a-z]{2,4}' ) );

ALTER TABLE detalii_biblioteca
    ADD CONSTRAINT detalii_biblioteca_program CHECK ( length(program) > 1 );

ALTER TABLE detalii_biblioteca ADD CONSTRAINT detalii_biblioteca_pk PRIMARY KEY ( id_biblioteca );

ALTER TABLE detalii_biblioteca ADD CONSTRAINT telefon_biblioteca UNIQUE ( telefon_biblioteca );

ALTER TABLE detalii_biblioteca ADD CONSTRAINT email_biblioteca UNIQUE ( email_biblioteca );

CREATE TABLE detalii_carti (
    status         VARCHAR2(10) NOT NULL,
    data_rezervare DATE,
    id_carte       NUMBER(2) NOT NULL,
    id_abonat      NUMBER(3),
    data_returnare DATE
);

ALTER TABLE detalii_carti
    ADD CONSTRAINT detalii_carti_status_ck CHECK ( status IN ( 'disponibila', 'imprumutata' ) );

ALTER TABLE detalii_carti ADD CONSTRAINT data_rezervare_ck CHECK ( data_rezervare < data_returnare );

ALTER TABLE detalii_carti ADD CONSTRAINT data_returnare_ck CHECK ( data_returnare > data_rezervare );

ALTER TABLE detalii_carti ADD CONSTRAINT detalii_carti_pk PRIMARY KEY ( id_carte );

ALTER TABLE abonament
    ADD CONSTRAINT abonat_abonament FOREIGN KEY ( id_abonat )
        REFERENCES abonat ( id_abonat );

ALTER TABLE detalii_carti
    ADD CONSTRAINT abonat_detalii_carti FOREIGN KEY ( id_abonat )
        REFERENCES abonat ( id_abonat );

ALTER TABLE abonat
    ADD CONSTRAINT biblioteca_abonament_fk FOREIGN KEY ( id_biblioteca )
        REFERENCES biblioteca ( id_biblioteca );

ALTER TABLE carti
    ADD CONSTRAINT biblioteca_carti_fk FOREIGN KEY ( id_biblioteca )
        REFERENCES biblioteca ( id_biblioteca );

ALTER TABLE detalii_biblioteca
    ADD CONSTRAINT biblioteca_detalii FOREIGN KEY ( id_biblioteca )
        REFERENCES biblioteca ( id_biblioteca );

ALTER TABLE carti_autori
    ADD CONSTRAINT carti_autori_autori_fk FOREIGN KEY ( autori_id_autor )
        REFERENCES autori ( id_autor );

ALTER TABLE carti_autori
    ADD CONSTRAINT carti_autori_carti_fk FOREIGN KEY ( carti_id_carte )
        REFERENCES carti ( id_carte );

ALTER TABLE detalii_carti
    ADD CONSTRAINT carti_detalii FOREIGN KEY ( id_carte )
        REFERENCES carti ( id_carte );
        
ALTER TABLE detalii_carti MODIFY status VARCHAR(20);

---------------------------TRIGGERI
CREATE OR REPLACE TRIGGER biblioteca_id_biblioteca_trg BEFORE
    INSERT ON biblioteca
    FOR EACH ROW
    WHEN ( new.id_biblioteca IS NULL )
BEGIN
    :new.id_biblioteca := biblioteca_id_biblioteca_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER abonament_id_abonament_trg BEFORE
    INSERT ON abonament
    FOR EACH ROW
    WHEN ( new.id_abonament IS NULL )
BEGIN
    :new.id_abonament := abonament_id_abonament_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER abonat_id_abonat_trg BEFORE
    INSERT ON abonat
    FOR EACH ROW
    WHEN ( new.id_abonat IS NULL )
BEGIN
    :new.id_abonat := abonat_id_abonat_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER autori_id_autor_trg BEFORE
    INSERT ON autori
    FOR EACH ROW
    WHEN ( new.id_autor IS NULL )
BEGIN
    :new.id_autor := autori_id_autor_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER carti_id_carte_trg BEFORE
    INSERT ON carti
    FOR EACH ROW
    WHEN ( new.id_carte IS NULL )
BEGIN
    :new.id_carte := carti_id_carte_seq.nextval;
END;
/


CREATE OR REPLACE TRIGGER TRG_rezervare_incepere
BEFORE INSERT ON detalii_carti
FOR EACH ROW
DECLARE
    v_data_incepere Date;
    v_data_expirare Date;

BEGIN
    IF(:new.status = 'imprumutata') THEN
        SELECT data_incepere, data_expirare INTO v_data_incepere, v_data_expirare FROM abonament WHERE id_abonat = :new.id_abonat;
        IF(:new.data_rezervare <= v_data_incepere OR :new.data_rezervare >= v_data_expirare) THEN
        RAISE_APPLICATION_ERROR( -20601,'Detalii rezevare invalide!');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_returnare_incepere
BEFORE INSERT ON detalii_carti
FOR EACH ROW
DECLARE
    v_data_incepere Date;
    v_data_expirare Date;

BEGIN
    IF(:new.status = 'imprumutata') THEN
        SELECT data_incepere, data_expirare INTO v_data_incepere, v_data_expirare FROM abonament WHERE id_abonat = :new.id_abonat;
        IF(:new.data_returnare <= v_data_incepere OR :new.data_returnare >= v_data_expirare) THEN
        RAISE_APPLICATION_ERROR( -20601,'Detalii rezevare invalide!');
        END IF;
    END IF;
END;